{"version":3,"file":"treemirror.js","sourceRoot":"","sources":["../src/treemirror.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,QAAQ,MAAM,WAAW,CAAC;AACjC,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,KAAK,OAAO,MAAM,MAAM,CAAC;AAEhC,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IACtB,MAAM,CAAC,EAAE,AAAD,EAAG,IAAI,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IAChD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACxC,OAAO,CAAC,KAAK,CACX;;;;;;;;;CASL,CAAC,IAAI,EAAE,CACH,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;IAED,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,KAAK,EAAE,EAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IACnE,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,MAAM,IAAI,GAAG,IAAI,GAAG,EAAU,CAAC;IAC/B,KAAK,MAAM,QAAQ,IAAI,OAAO,EAAE;QAC9B,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QACvE,OAAO,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;KACnC;IAED,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC,CAAC;IAE5E,MAAM,OAAO,CAAC,GAAG,CACf,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,EAAE,EAAE;QACvC,yBAAyB;QACzB,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,IAAI,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport fastGlob from 'fast-glob';\nimport * as fs from 'fs/promises';\nimport * as pathlib from 'path';\n\nconst main = async () => {\n  const [, , root, dest, ...globs] = process.argv;\n  if (!root || !dest || globs.length === 0) {\n    console.error(\n      `\nUSAGE\n    treemirror ROOT_DIR DEST_DIR GLOB1 [GLOB2, ...]\"\n\nEXAMPLES\n    To recursively copy all \"d.ts\" and \"d.ts.map\" files in the\n    \"development\" directory to the current directory:\n\n        treemirror development . '**/*.d.ts' '**/*.d.ts.map'\n`.trim()\n    );\n    process.exit(1);\n  }\n\n  const matches = await fastGlob(globs, {cwd: root, absolute: true});\n  const mirrors = [];\n  const dirs = new Set<string>();\n  for (const original of matches) {\n    const mirror = pathlib.resolve(dest, pathlib.relative(root, original));\n    mirrors.push({original, mirror});\n    dirs.add(pathlib.dirname(mirror));\n  }\n\n  await Promise.all([...dirs].map((dir) => fs.mkdir(dir, {recursive: true})));\n\n  await Promise.all(\n    mirrors.map(async ({original, mirror}) => {\n      // Overwrites by default.\n      await fs.copyFile(original, mirror);\n    })\n  );\n};\n\nmain();\n"]}