{"version":3,"file":"static_test.js","sourceRoot":"","sources":["../../src/test/static_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {render} from '../lit-html.js';\nimport {html, literal, unsafeStatic} from '../static.js';\nimport {assert} from '@esm-bundle/chai';\nimport {stripExpressionComments} from './test-utils/strip-markers.js';\n\nsuite('static', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('static text binding', () => {\n    render(html`${literal`<p>Hello</p>`}`, container);\n    // If this were a dynamic binding, the tags would be escaped\n    assert.equal(stripExpressionComments(container.innerHTML), '<p>Hello</p>');\n  });\n\n  test('static attribute binding', () => {\n    render(html`<div class=\"${literal`cool`}\"></div>`, container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div class=\"cool\"></div>'\n    );\n    // TODO: test that this is actually static. It's not currently possible with\n    // the public API\n  });\n\n  test('static tag binding', () => {\n    const tagName = literal`div`;\n    render(html`<${tagName}>${'A'}</${tagName}>`, container);\n    assert.equal(stripExpressionComments(container.innerHTML), '<div>A</div>');\n  });\n\n  test('static attribute name binding', () => {\n    render(html`<div ${literal`foo`}=\"${'bar'}\"></div>`, container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div foo=\"bar\"></div>'\n    );\n\n    render(html`<div x-${literal`foo`}=\"${'bar'}\"></div>`, container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div x-foo=\"bar\"></div>'\n    );\n  });\n\n  test('static attribute name binding', () => {\n    render(html`<div ${literal`foo`}=\"${literal`bar`}\"></div>`, container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div foo=\"bar\"></div>'\n    );\n  });\n\n  test('dynamic binding after static text binding', () => {\n    render(html`${literal`<p>Hello</p>`}${'<p>World</p>'}`, container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<p>Hello</p>&lt;p&gt;World&lt;/p&gt;'\n    );\n\n    // Make sure `null` is handled\n    render(html`${literal`<p>Hello</p>`}${null}`, container);\n    assert.equal(stripExpressionComments(container.innerHTML), '<p>Hello</p>');\n  });\n\n  test('static bindings are keyed by static values', () => {\n    // A template with a bound tag name. We should be able to re-render\n    // this template with different tag names and have the tag names update.\n    // New tag names will act as different templates.\n    const t = (tag: string, text: string) =>\n      html`<${unsafeStatic(tag)}>${text}</${unsafeStatic(tag)}>`;\n\n    render(t('div', 'abc'), container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div>abc</div>'\n    );\n    const div = container.querySelector('div');\n    assert.isNotNull(div);\n\n    render(t('div', 'def'), container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div>def</div>'\n    );\n    const div2 = container.querySelector('div');\n    // Static values are stable between renders like static template strings\n    assert.strictEqual(div2, div);\n\n    render(t('span', 'abc'), container);\n    // Rendering with a new static value should work, though it re-renders\n    // since we have a new template.\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<span>abc</span>'\n    );\n    const span = container.querySelector('span');\n    assert.isNotNull(span);\n\n    render(t('span', 'def'), container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<span>def</span>'\n    );\n    const span2 = container.querySelector('span');\n    assert.strictEqual(span2, span);\n\n    render(t('div', 'abc'), container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div>abc</div>'\n    );\n    const div3 = container.querySelector('div');\n    // Static values do not have any caching behavior. Re-rendering with a\n    // previously used value does not restore static DOM\n    assert.notStrictEqual(div3, div);\n  });\n\n  test('interpolating statics into statics', () => {\n    const start = literal`<${literal`sp${literal`an`}`}>`;\n    const end = literal`</${unsafeStatic('span')}>`;\n    render(html`<div>a${start}b${end}c</div>`, container);\n    assert.equal(\n      stripExpressionComments(container.innerHTML),\n      '<div>a<span>b</span>c</div>'\n    );\n  });\n\n  test('interpolating non-statics into statics throws', () => {\n    assert.throws(() => {\n      literal`a${literal`bar`}b${'shouldthrow'}`;\n    });\n  });\n\n  suite('unsafe', () => {\n    test('static tag binding', () => {\n      const tagName = unsafeStatic('div');\n      render(html`<${tagName}>${'A'}</${tagName}>`, container);\n      assert.equal(\n        stripExpressionComments(container.innerHTML),\n        '<div>A</div>'\n      );\n    });\n\n    test('static attribute name binding', () => {\n      render(html`<div ${unsafeStatic('foo')}=\"${'bar'}\"></div>`, container);\n      assert.equal(\n        stripExpressionComments(container.innerHTML),\n        '<div foo=\"bar\"></div>'\n      );\n\n      render(html`<div x-${unsafeStatic('foo')}=\"${'bar'}\"></div>`, container);\n      assert.equal(\n        stripExpressionComments(container.innerHTML),\n        '<div x-foo=\"bar\"></div>'\n      );\n    });\n  });\n});\n"]}