{"version":3,"file":"unsafe-html_test.js","sourceRoot":"","sources":["../../../src/test/directives/unsafe-html_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {unsafeHTML} from '../../directives/unsafe-html.js';\nimport {render, html} from '../../lit-html.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\nimport {assert} from '@esm-bundle/chai';\n\nsuite('unsafeHTML directive', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('renders HTML', () => {\n    render(\n      html`<div>before${unsafeHTML('<span>inner</span>after')}</div>`,\n      container\n    );\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>before<span>inner</span>after</div>'\n    );\n  });\n\n  test('dirty checks primitive values', () => {\n    const value = 'aaa';\n    const t = () => html`<div>${unsafeHTML(value)}</div>`;\n\n    // Initial render\n    render(t(), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>aaa</div>');\n\n    // Modify instance directly. Since lit-html doesn't dirty check against\n    // actual DOM, but against previous part values, this modification should\n    // persist through the next render if dirty checking works.\n    const text = container.querySelector('div')!.childNodes[1] as Text;\n    text.textContent = 'bbb';\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>bbb</div>',\n      'A'\n    );\n\n    // Re-render with the same value\n    render(t(), container);\n\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>bbb</div>',\n      'B'\n    );\n    const text2 = container.querySelector('div')!.childNodes[1] as Text;\n    assert.strictEqual(text, text2);\n  });\n\n  test('throws on non-string values', () => {\n    const value = ['aaa'];\n    const t = () => html`<div>${unsafeHTML(value as any)}</div>`;\n    assert.throws(() => render(t(), container));\n  });\n\n  test('renders after other values', () => {\n    const value = '<span></span>';\n    const primitive = 'aaa';\n    const t = (content: any) => html`<div>${content}</div>`;\n\n    // Initial unsafeHTML render\n    render(t(unsafeHTML(value)), container);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><span></span></div>'\n    );\n\n    // Re-render with a non-unsafeHTML value\n    render(t(primitive), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>aaa</div>');\n\n    // Re-render with unsafeHTML again\n    render(t(unsafeHTML(value)), container);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><span></span></div>'\n    );\n  });\n});\n"]}