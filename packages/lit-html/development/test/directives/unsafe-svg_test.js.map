{"version":3,"file":"unsafe-svg_test.js","sourceRoot":"","sources":["../../../src/test/directives/unsafe-svg_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {unsafeSVG} from '../../directives/unsafe-svg.js';\nimport {render, html} from '../../lit-html.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\nimport {assert} from '@esm-bundle/chai';\n\nsuite('unsafeSVG', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('renders SVG', () => {\n    render(\n      // prettier-ignore\n      html`<svg>before${unsafeSVG(\n          '<line x1=\"0\" y1=\"0\" x2=\"10\" y2=\"10\" stroke=\"black\"/>'\n        )}</svg>`,\n      container\n    );\n    assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n      '<svg>before<line x1=\"0\" y1=\"0\" x2=\"10\" y2=\"10\" stroke=\"black\"></line></svg>',\n      '<svg>before<line stroke=\"black\" x1=\"0\" y1=\"0\" x2=\"10\" y2=\"10\"></line></svg>',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">before<line stroke=\"black\" x1=\"0\" y1=\"0\" x2=\"10\" y2=\"10\" /></svg>',\n    ]);\n    const lineElement = container.querySelector('line')!;\n    assert.equal(lineElement.namespaceURI, 'http://www.w3.org/2000/svg');\n  });\n\n  test('dirty checks primitive values', () => {\n    const value = 'aaa';\n    const t = () => html`<svg>${unsafeSVG(value)}</svg>`;\n\n    // Initial render\n    render(t(), container);\n    assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n      '<svg>aaa</svg>',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">aaa</svg>',\n    ]);\n\n    // Modify instance directly. Since lit-html doesn't dirty check against\n    // actual DOM, but against previous part values, this modification should\n    // persist through the next render if dirty checking works.\n    const text = container.querySelector('svg')!.childNodes[1] as Text;\n    text.textContent = 'bbb';\n    assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n      '<svg>bbb</svg>',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">bbb</svg>',\n    ]);\n\n    // Re-render with the same value\n    render(t(), container);\n    assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n      '<svg>bbb</svg>',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">bbb</svg>',\n    ]);\n    const text2 = container.querySelector('svg')!.childNodes[1] as Text;\n    assert.strictEqual(text, text2);\n  });\n\n  test('throws on non-string values', () => {\n    const value = ['aaa'];\n    const t = () => html`<div>${unsafeSVG(value as any)}</div>`;\n    assert.throws(() => render(t(), container));\n  });\n\n  test('renders after other values', () => {\n    const value = '<text></text>';\n    const primitive = 'aaa';\n    const t = (content: any) => html`<svg>${content}</svg>`;\n\n    // Initial unsafeSVG render\n    render(t(unsafeSVG(value)), container);\n    assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n      '<svg><text></text></svg>',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\"><text /></svg>',\n    ]);\n\n    // Re-render with a non-unsafeSVG value\n    render(t(primitive), container);\n    assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n      '<svg>aaa</svg>',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">aaa</svg>',\n    ]);\n\n    // Re-render with unsafeSVG again\n    render(t(unsafeSVG(value)), container);\n    assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n      '<svg><text></text></svg>',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\"><text /></svg>',\n    ]);\n  });\n});\n"]}