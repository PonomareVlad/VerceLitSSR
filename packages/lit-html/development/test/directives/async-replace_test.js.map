{"version":3,"file":"async-replace_test.js","sourceRoot":"","sources":["../../../src/test/directives/async-replace_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {asyncReplace} from '../../directives/async-replace.js';\nimport {render, html} from '../../lit-html.js';\nimport {TestAsyncIterable} from './test-async-iterable.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\nimport {assert} from '@esm-bundle/chai';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// Set Symbol.asyncIterator on browsers without it\nif (typeof Symbol !== undefined && Symbol.asyncIterator === undefined) {\n  Object.defineProperty(Symbol, 'Symbol.asyncIterator', {value: Symbol()});\n}\n\nsuite('asyncReplace', () => {\n  let container: HTMLDivElement;\n  let iterable: TestAsyncIterable<unknown>;\n\n  setup(() => {\n    container = document.createElement('div');\n    iterable = new TestAsyncIterable<unknown>();\n  });\n\n  test('replaces content as the async iterable yields new values (ChildPart)', async () => {\n    render(html`<div>${asyncReplace(iterable)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable.push('bar');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n  });\n\n  test('replaces content as the async iterable yields new values (AttributePart)', async () => {\n    render(html`<div class=\"${asyncReplace(iterable)}\"></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div class=\"foo\"></div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div class=\"bar\"></div>'\n    );\n  });\n\n  test('replaces content as the async iterable yields new values (PropertyPart)', async () => {\n    render(html`<div .className=${asyncReplace(iterable)}></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div class=\"foo\"></div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div class=\"bar\"></div>'\n    );\n  });\n\n  test('replaces content as the async iterable yields new values (BooleanAttributePart)', async () => {\n    render(html`<div ?hidden=${asyncReplace(iterable)}></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push(true);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div hidden=\"\"></div>'\n    );\n\n    await iterable.push(false);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('replaces content as the async iterable yields new values (EventPart)', async () => {\n    render(html`<div @click=${asyncReplace(iterable)}></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    let value;\n    await iterable.push(() => (value = 1));\n    (container.firstElementChild as HTMLDivElement)!.click();\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    assert.equal(value, 1);\n\n    await iterable.push(() => (value = 2));\n    (container.firstElementChild as HTMLDivElement)!.click();\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    assert.equal(value, 2);\n  });\n\n  test('clears the Part when a value is undefined', async () => {\n    render(html`<div>${asyncReplace(iterable)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable.push(undefined as unknown as string);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('uses the mapper function', async () => {\n    render(\n      html`<div>${asyncReplace(iterable, (v, i) => html`${i}: ${v} `)}</div>`,\n      container\n    );\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>0: foo </div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>1: bar </div>'\n    );\n  });\n\n  test('renders new iterable over a pending iterable', async () => {\n    const t = (iterable: any) => html`<div>${asyncReplace(iterable)}</div>`;\n    render(t(iterable), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    const iterable2 = new TestAsyncIterable<string>();\n    render(t(iterable2), container);\n\n    // The last value is preserved until we receive the first\n    // value from the new iterable\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable2.push('hello');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n  });\n\n  test('renders the same iterable even when the iterable new value is emitted at the same time as a re-render', async () => {\n    const t = (iterable: any) => html`<div>${asyncReplace(iterable)}</div>`;\n    let wait: Promise<void>;\n    render(t(iterable), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    wait = iterable.push('hello');\n    render(t(iterable), container);\n    await wait;\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n\n    wait = iterable.push('bar');\n    render(t(iterable), container);\n    await wait;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n  });\n\n  test('renders new value over a pending iterable', async () => {\n    const t = (v: any) => html`<div>${v}</div>`;\n    // This is a little bit of an odd usage of directives as values, but it\n    // is possible, and we check here that asyncReplace plays nice in this case\n    render(t(asyncReplace(iterable)), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    render(t('hello'), container);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n  });\n\n  test('does not render the first value if it is replaced first', async () => {\n    async function* generator(delay: Promise<any>, value: any) {\n      await delay;\n      yield value;\n    }\n\n    const component = (value: any) => html`<p>${asyncReplace(value)}</p>`;\n    const delay = (delay: number) =>\n      new Promise((res) => setTimeout(res, delay));\n\n    const slowDelay = delay(20);\n    const fastDelay = delay(10);\n\n    render(component(generator(slowDelay, 'slow')), container);\n    render(component(generator(fastDelay, 'fast')), container);\n\n    await slowDelay;\n    await delay(10);\n\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>fast</p>');\n  });\n\n  test('does not render while disconnected', async () => {\n    const component = (value: any) => html`<p>${asyncReplace(value)}</p>`;\n    const part = render(component(iterable), container);\n    await iterable.push('1');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>1</p>');\n    part.setConnected(false);\n    await iterable.push('2');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>1</p>');\n    part.setConnected(true);\n    await new Promise<void>((r) => requestAnimationFrame(() => r()));\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>2</p>');\n    await iterable.push('3');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>3</p>');\n  });\n});\n"]}