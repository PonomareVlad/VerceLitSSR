{"version":3,"file":"template-content_test.js","sourceRoot":"","sources":["../../../src/test/directives/template-content_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {templateContent} from '../../directives/template-content.js';\nimport {html, render} from '../../lit-html.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\nimport {assert} from '@esm-bundle/chai';\n\nsuite('templateContent', () => {\n  let container: HTMLElement;\n  const template = document.createElement('template');\n  template.innerHTML = '<div>aaa</div>';\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('renders a template', () => {\n    render(html`<div>${templateContent(template)}</div>`, container);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><div>aaa</div></div>'\n    );\n  });\n\n  test('clones a template only once', () => {\n    const go = () =>\n      render(html`<div>${templateContent(template)}</div>`, container);\n    go();\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><div>aaa</div></div>'\n    );\n    const templateDiv = container.querySelector('div > div') as HTMLDivElement;\n\n    go();\n    const templateDiv2 = container.querySelector('div > div') as HTMLDivElement;\n    assert.equal(templateDiv, templateDiv2);\n  });\n\n  test('renders a new template over a previous one', () => {\n    const go = (t: HTMLTemplateElement) =>\n      render(html`<div>${templateContent(t)}</div>`, container);\n    go(template);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><div>aaa</div></div>'\n    );\n\n    const newTemplate = document.createElement('template');\n    newTemplate.innerHTML = '<span>bbb</span>';\n    go(newTemplate);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><span>bbb</span></div>'\n    );\n  });\n\n  // TODO (justinfagnani): lit-html core has a bug/limitiation around swapping\n  // a directive with a non-directive.\n  // See https://github.com/lit/lit/issues/1286\n  test.skip('re-renders a template over a non-templateContent value', () => {\n    const go = (v: unknown) => render(html`<div>${v}</div>`, container);\n    go(templateContent(template));\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><div>aaa</div></div>'\n    );\n\n    go('ccc');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>ccc</div>');\n\n    go(templateContent(template));\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div><div>aaa</div></div>'\n    );\n  });\n});\n"]}