{"version":3,"file":"repeat_test.js","sourceRoot":"","sources":["../../../src/test/directives/repeat_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {repeat} from '../../directives/repeat.js';\nimport {render, html} from '../../lit-html.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\nimport {assert} from '@esm-bundle/chai';\n\nfunction assertItemIdentity(\n  oldChildren: HTMLElement[],\n  newChildren: HTMLElement[],\n  newOrder: number[]\n) {\n  newOrder.forEach((o, n) => {\n    if (o >= 0 && o < oldChildren.length) {\n      assert.strictEqual(oldChildren[o], newChildren[n]);\n    }\n  });\n}\n\nsuite('repeat', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  suite('keyed', () => {\n    test('renders a list', () => {\n      // prettier-ignore\n      const r = html`${repeat([1, 2, 3], (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n      render(r, container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 3</li>`\n      );\n    });\n\n    test('renders a list twice', () => {\n      const t = (items: any[]) =>\n        // prettier-ignore\n        html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t([0, 1, 2]), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      render(t([0, 1, 2]), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, [0, 1, 2]);\n    });\n\n    test('shuffles are stable', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [2, 1, 0];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 2</li>\n            <li>item: 1</li>\n            <li>item: 0</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('shuffles a list with additions', () => {\n      let items = [0, 1, 2, 3, 4];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 3</li>\n            <li>item: 4</li>`\n      );\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [2, 0, 3, 5, 1, 4];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 2</li>\n            <li>item: 0</li>\n            <li>item: 3</li>\n            <li>item: 5</li>\n            <li>item: 1</li>\n            <li>item: 4</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('swaps are stable', () => {\n      const t = (items: number[]) =>\n        // prettier-ignore\n        html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      let items = [0, 1, 2, 3, 4];\n      render(t(items), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 3</li>\n            <li>item: 4</li>`\n      );\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 4, 2, 3, 1];\n      render(t(items), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 4</li>\n            <li>item: 2</li>\n            <li>item: 3</li>\n            <li>item: 1</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can re-render after swap', () => {\n      const t = (items: number[]) =>\n        // prettier-ignore\n        html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      let items = [0, 1, 2];\n      render(t(items), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n\n      items = [2, 1, 0];\n      render(t(items), container);\n\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 2</li>\n            <li>item: 1</li>\n            <li>item: 0</li>`\n      );\n\n      render(t(items), container);\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can insert an item at the beginning', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n      render(t(), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [-1, 0, 1, 2];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: -1</li>\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can insert an item at the end', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 1, 2, 3];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 3</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can replace with an empty list', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      items = [];\n      render(t(), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), ``);\n    });\n\n    test('can remove the first item', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [1, 2];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can remove the last item', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 1];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can remove a middle item', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 2];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 2</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can remove multiple middle items', () => {\n      let items = [0, 1, 2, 3, 4, 5, 6];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 3, 6];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 3</li>\n            <li>item: 6</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can move multiple middle items', () => {\n      let items = [0, 1, 2, 3, 4, 5, 6];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 4, 5, 3, 2, 1, 6];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 4</li>\n            <li>item: 5</li>\n            <li>item: 3</li>\n            <li>item: 2</li>\n            <li>item: 1</li>\n            <li>item: 6</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      assertItemIdentity(children1, children2, items);\n    });\n\n    test('can add multiple middle items', () => {\n      let items = [0, 1, 2, 3, 4];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 5, 1, 2, 3, 6, 4];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 5</li>\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 3</li>\n            <li>item: 6</li>\n            <li>item: 4</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n      assertItemIdentity(children1, children2, items);\n    });\n  });\n\n  suite('un-keyed', () => {\n    test('renders a list', () => {\n      // prettier-ignore\n      const r = html`${repeat([0, 1, 2], (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n      render(r, container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n    });\n\n    test('shuffles a list', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n\n      items = [2, 1, 0];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 2</li>\n            <li>item: 1</li>\n            <li>item: 0</li>`\n      );\n    });\n\n    test('can replace with an empty list', () => {\n      let items = [0, 1, 2];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n      render(t(), container);\n\n      items = [];\n      render(t(), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), ``);\n    });\n\n    test('re-renders a list', () => {\n      const items = [0, 1, 2, 3, 4];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t(), container);\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 3</li>\n            <li>item: 4</li>`\n      );\n    });\n\n    test('render objects as items with mutable update', () => {\n      const items = [{text: '0'}, {text: '1'}, {text: '2'}];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => html`\n            <li>item: ${i.text}</li>`)}`;\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items[1].text += '*';\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1*</li>\n            <li>item: 2</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n      assertItemIdentity(children1, children2, [0, 1, 2]);\n    });\n\n    test('render objects as items with immutable update', () => {\n      let items = [{text: '0'}, {text: '1'}, {text: '2'}];\n      // prettier-ignore\n      const t = () => html`${repeat(items, (i) => html`\n            <li>item: ${i.text}</li>`)}`;\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>`\n      );\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [items[0], {text: items[1].text + '*'}, items[2]];\n      render(t(), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1*</li>\n            <li>item: 2</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n      assertItemIdentity(children1, children2, [0, 1, 2]);\n    });\n  });\n\n  //   suite('rendering other values', () => {\n  //     test('render promises as values', async () => {\n  //       const items = [0, 1, 2];\n  //       const t = () =>\n  //           html`${repeat(items, (i: number) => until(Promise.resolve(html`\n  //             <li>promised: ${i}</li>`)))}`;\n  //       render(t(), container);\n  //       assert.equal(stripExpressionMarkers(container.innerHTML), '');\n  //       await Promise.resolve();\n  //       assert.equal(stripExpressionMarkers(container.innerHTML), `\n  //             <li>promised: 0</li>\n  //             <li>promised: 1</li>\n  //             <li>promised: 2</li>`);\n  //     });\n\n  //     test('render nested directives as values', async () => {\n  //       const items = [0, 1, 2];\n  //       const t = () => html`${\n  //           repeat(\n  //               items,\n  //               (i: number) => until(\n  //                   Promise.resolve(guard(items, () => html`\n  //             <li>guarded: ${i}</li>`)),\n  //                   html`\n  //             <li>wait: ${i}</li>`))}`;\n  //       render(t(), container);\n  //       assert.equal(stripExpressionMarkers(container.innerHTML), `\n  //             <li>wait: 0</li>\n  //             <li>wait: 1</li>\n  //             <li>wait: 2</li>`);\n  //       await Promise.resolve();\n  //       assert.equal(stripExpressionMarkers(container.innerHTML), `\n  //             <li>guarded: 0</li>\n  //             <li>guarded: 1</li>\n  //             <li>guarded: 2</li>`);\n  //     });\n  //   });\n\n  suite('undefined behavior', () => {\n    // Note these tests are only meant to capture the current implementation's\n    // behavior, not to serve as a guarantee for repeat's behavior.\n    // Providing duplicate keys is officially not supported.  If these tests\n    // break due to implementation changes, feel free to update the expected\n    // results.\n\n    test('initial render of contiguous duplicate keys', () => {\n      const t = (items: number[]) =>\n        // prettier-ignore\n        html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t([0, 1, 2, 2, 3, 4]), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 2</li>\n            <li>item: 3</li>\n            <li>item: 4</li>`\n      );\n    });\n\n    test('update contiguous duplicate keys (no order change)', () => {\n      const t = (items: number[]) =>\n        // prettier-ignore\n        html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      let items = [0, 1, 2, 2, 3, 4];\n      render(t(items), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [0, 1, 2, 2, 3, 4];\n      render(t(items), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 2</li>\n            <li>item: 3</li>\n            <li>item: 4</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      //   Parts for these dup'ed keys are maintained v  v\n      assertItemIdentity(children1, children2, [0, 1, 2, 3, 4, 5]);\n    });\n\n    test('initial render of duplicate keys with skip', () => {\n      const t = (items: number[]) =>\n        // prettier-ignore\n        html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      render(t([0, 1, 42, 2, 42, 3, 4]), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 0</li>\n            <li>item: 1</li>\n            <li>item: 42</li>\n            <li>item: 2</li>\n            <li>item: 42</li>\n            <li>item: 3</li>\n            <li>item: 4</li>`\n      );\n    });\n\n    test('update duplicate keys with skip', () => {\n      const t = (items: number[]) =>\n        // prettier-ignore\n        html`${repeat(items, (i) => i, (i: number) => html`\n            <li>item: ${i}</li>`)}`;\n\n      let items = [0, 1, 2, 3, 2, 4, 5];\n      render(t(items), container);\n      const children1 = Array.from(container.querySelectorAll('li'));\n\n      items = [1, 2, 0, 5, 2, 4, 3];\n      render(t(items), container);\n      assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `\n            <li>item: 1</li>\n            <li>item: 2</li>\n            <li>item: 0</li>\n            <li>item: 5</li>\n            <li>item: 2</li>\n            <li>item: 4</li>\n            <li>item: 3</li>`\n      );\n      const children2 = Array.from(container.querySelectorAll('li'));\n\n      // Part for this duplicate key was re-created v\n      assertItemIdentity(children1, children2, [1, -1, 0, 6, 2, 5, 3]);\n    });\n  });\n});\n"]}