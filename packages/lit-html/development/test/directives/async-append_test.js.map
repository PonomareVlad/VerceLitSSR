{"version":3,"file":"async-append_test.js","sourceRoot":"","sources":["../../../src/test/directives/async-append_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {asyncAppend} from '../../directives/async-append.js';\nimport {render, html} from '../../lit-html.js';\nimport {TestAsyncIterable} from './test-async-iterable.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\nimport {assert} from '@esm-bundle/chai';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// Set Symbol.asyncIterator on browsers without it\nif (typeof Symbol !== undefined && Symbol.asyncIterator === undefined) {\n  Object.defineProperty(Symbol, 'Symbol.asyncIterator', {value: Symbol()});\n}\n\nsuite('asyncAppend', () => {\n  let container: HTMLDivElement;\n  let iterable: TestAsyncIterable<string>;\n\n  setup(() => {\n    container = document.createElement('div');\n    iterable = new TestAsyncIterable<string>();\n  });\n\n  test('appends content as the async iterable yields new values', async () => {\n    render(html`<div>${asyncAppend(iterable)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>foobar</div>'\n    );\n  });\n\n  test('appends nothing with a value is undefined', async () => {\n    render(html`<div>${asyncAppend(iterable)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable.push(undefined as unknown as string);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('uses a mapper function', async () => {\n    render(\n      html`<div>${asyncAppend(iterable, (v, i) => html`${i}: ${v} `)}</div>`,\n      container\n    );\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>0: foo </div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>0: foo 1: bar </div>'\n    );\n  });\n\n  test('renders new iterable over a pending iterable', async () => {\n    const t = (iterable: any) => html`<div>${asyncAppend(iterable)}</div>`;\n    render(t(iterable), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    const iterable2 = new TestAsyncIterable<string>();\n    render(t(iterable2), container);\n\n    // The last value is preserved until we receive the first\n    // value from the new iterable\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable2.push('hello');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n  });\n\n  test('renders new value over a pending iterable', async () => {\n    const t = (v: any) => html`<div>${v}</div>`;\n    // This is a little bit of an odd usage of directives as values, but it\n    // is possible, and we check here that asyncAppend plays nice in this case\n    render(t(asyncAppend(iterable)), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    render(t('hello'), container);\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n\n    await iterable.push('bar');\n    assert.equal(\n      stripExpressionMarkers(container.innerHTML),\n      '<div>hello</div>'\n    );\n  });\n\n  test('does not render the first value if it is replaced first', async () => {\n    const iterable2 = new TestAsyncIterable<string>();\n\n    const component = (value: any) => html`<p>${asyncAppend(value)}</p>`;\n\n    render(component(iterable), container);\n    render(component(iterable2), container);\n\n    await iterable2.push('fast');\n\n    // This write should not render, since the whole iterator was replaced\n    await iterable.push('slow');\n\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>fast</p>');\n  });\n\n  test('does not render while disconnected', async () => {\n    const component = (value: any) => html`<p>${asyncAppend(value)}</p>`;\n    const part = render(component(iterable), container);\n    await iterable.push('1');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>1</p>');\n    part.setConnected(false);\n    await iterable.push('2');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>1</p>');\n    part.setConnected(true);\n    await new Promise<void>((r) => requestAnimationFrame(() => r()));\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>12</p>');\n    await iterable.push('3');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>123</p>');\n  });\n});\n"]}