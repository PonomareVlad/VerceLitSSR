{"version":3,"file":"until.js","sources":["../../src/directives/until.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {directive} from '../directive.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {AsyncDirective} from '../async-directive.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private _lastRenderedIndex: number = _infinity;\n  private _values: unknown[] = [];\n\n  render(...args: Array<unknown>) {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  update(_part: Part, args: Array<unknown>) {\n    const previousValues = this._values;\n    let previousLength = previousValues.length;\n    this._values = args;\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this._lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this._lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this._lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      Promise.resolve(value).then((resolvedValue: unknown) => {\n        const index = this._values.indexOf(value);\n        // If state.values doesn't contain the value, we've re-rendered without\n        // the value, so don't render it. Then, only render if the value is\n        // higher-priority than what's already been rendered.\n        if (index > -1 && index < this._lastRenderedIndex) {\n          this._lastRenderedIndex = index;\n          this.setValue(resolvedValue);\n        }\n      });\n    }\n\n    return noChange;\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive(UntilDirective);\n"],"names":["isPromise","x","isPrimitive","then","UntilDirective","AsyncDirective","[object Object]","this","args","find","noChange","_part","previousValues","_values","previousLength","length","i","_lastRenderedIndex","value","Promise","resolve","resolvedValue","index","indexOf","setValue","until","directive"],"mappings":";;;;;GAWA,MAAMA,EAAaC,IACTC,EAAYD,IAA8C,mBAAhCA,EAAuBE,WAK9CC,UAAuBC,EAApCC,kCACUC,qBAHQ,WAIRA,qBAAqB,GAE7BD,UAAUE,SACR,iBAAOA,EAAKC,MAAMR,IAAOD,EAAUC,oBAAOS,EAG5CJ,OAAOK,EAAaH,GAClB,MAAMI,EAAiBL,KAAKM,gBAC5B,IAAIC,EAAiBF,EAAeG,OACpCR,KAAKM,gBAAUL,EAEf,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAKO,UAEnBC,EAAIT,KAAKU,iBAFkBD,IAAK,CAMpC,MAAME,EAAQV,EAAKQ,GAGnB,IAAKhB,EAAUkB,GAIb,OAHAX,KAAKU,gBAAqBD,EAGnBE,EAILF,EAAIF,GAAkBI,IAAUN,EAAeI,KAMnDT,KAAKU,gBAtCO,WAuCZH,EAAiB,EAEjBK,QAAQC,QAAQF,GAAOf,MAAMkB,IAC3B,MAAMC,EAAQf,KAAKM,gBAAQU,QAAQL,GAI/BI,GAAS,GAAKA,EAAQf,KAAKU,kBAC7BV,KAAKU,gBAAqBK,EAC1Bf,KAAKiB,SAASH,QAKpB,OAAOX,SAuBEe,EAAQC,EAAUtB"}