import{noChange as i}from"./lit-html.js";import{isSingleExpression as t}from"./directive-helpers.js";import{Directive as s,PartType as e}from"./directive.js";export{directive}from"./directive.js";
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const r=(i,t)=>{var s,e;const o=i._$AN;if(void 0===o)return!1;for(const i of o)null===(e=(s=i)._$AO)||void 0===e||e.call(s,t,!1),r(i,t);return!0},o=i=>{let t,s;do{if(void 0===(t=i._$AM))break;s=t._$AN,s.delete(i),i=t}while(0===(null==s?void 0:s.size))},h=i=>{for(let t;t=i._$AM;i=t){let s=t._$AN;if(void 0===s)t._$AN=s=new Set;else if(s.has(i))break;s.add(i),d(t)}};function n(i){void 0!==this._$AN?(o(this),this._$AM=i,h(this)):this._$AM=i}function l(i,t=!1,s=0){const e=this._$AH,h=this._$AN;if(void 0!==h&&0!==h.size)if(t)if(Array.isArray(e))for(let i=s;i<e.length;i++)r(e[i],!1),o(e[i]);else null!=e&&(r(e,!1),o(e));else r(this,i)}const d=i=>{var t,s,r,o;i.type==e.CHILD&&(null!==(t=(r=i)._$AP)&&void 0!==t||(r._$AP=l),null!==(s=(o=i)._$AQ)&&void 0!==s||(o._$AQ=n))};class c extends s{constructor(){super(...arguments),this.isConnected=!0,this.VERSION_TEST_F=i,this._$AN=void 0}_$AT(i,t,s){super._$AT(i,t,s),h(this)}_$AO(i,t=!0){this.VERSION_TEST_q(i),t&&(r(this,i),o(this))}VERSION_TEST_q(t){var s,e;t!==this.isConnected&&(t?(this.isConnected=!0,this.VERSION_TEST_F!==i&&(this.setValue(this.VERSION_TEST_F),this.VERSION_TEST_F=i),null===(s=this.reconnected)||void 0===s||s.call(this)):(this.isConnected=!1,null===(e=this.disconnected)||void 0===e||e.call(this)))}_$AS(i,t){if(!this.isConnected)throw Error(`AsyncDirective ${this.constructor.name} was rendered while its tree was disconnected.`);return super._$AS(i,t)}setValue(i){if(this.isConnected)if(t(this.VERSION_TEST__$CZ))this.VERSION_TEST__$CZ._$AI(i,this);else{const t=[...this.VERSION_TEST__$CZ._$AH];t[this.VERSION_TEST__$CB]=i,this.VERSION_TEST__$CZ._$AI(t,this,0)}else this.VERSION_TEST_F=i}disconnected(){}reconnected(){}}export{c as AsyncDirective};
//# sourceMappingURL=async-directive.js.map
